que 1. What is the name of the feature responsible for generating Regex objects?

ans In Python, the re module provides support for regular expressions, and the re.compile() function is responsible for generating Regex objects.

    The re.compile() function takes a regular expression pattern as its argument and returns a Regex object, which can be used to match patterns against strings using the various search(), findall(), finditer(), and other methods provided by the re module.

que 2. Why do raw strings often appear in Regex objects?

ans Raw strings are often used in Regex objects because regular expressions often contain a lot of backslashes, which have a special meaning in Python string literals.

que.3. What is the return value of the search() method?
 
ans The search() method of a re module's Regex object returns a match object if it finds a match in the input string, and None otherwise.

    The match object contains information about the match, such as the starting and ending indices of the match, the matched substring, and any captured groups.


que 4. From a Match item, how do you get the actual strings that match the pattern?

ans  You can get the actual strings that match the pattern from a Match object using the group() method. The group() method returns the substring that was matched by the regular expression.

     By default, group() returns the entire matched substring. However, if the regular expression has capturing groups (indicated by parentheses), you can specify which group you want to retrieve by passing an integer argument to group().
     
     this is exapmle :-


     import re

     Define a regular expression pattern with capturing groups
     pattern = r'(\d{3})-(\d{3})-(\d{4})'

     Compile the pattern into a Regex object
     regex = re.compile(pattern)

     Use the Regex object to search for a phone number in a string
     text = 'Contact us at 123-456-7890 or 555-555-5555'
     match = regex.search(text)

     Get the entire matched substring
     matched_str = match.group()
     print(matched_str)   # Output: '123-456-7890'

     Get the substring matched by the second capturing group
     group_2 = match.group(2)
     print(group_2)   # Output: '456'


que 5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover? Group 2? Group 1?

ans 



     import re

     text = 'My phone number is 123-456-7890'

     # Compile the regular expression pattern into a regex object
     pattern = r'(\d\d\d)-(\d\d\d-\d\d\d\d)'
     regex = re.compile(pattern)

     # Use the search method to find the first match in the string
     match = regex.search(text)

     # Get the matched string and the substrings matched by the capturing groups
     matched_str = match.group(0)
     group_1 = match.group(1)
     group_2 = match.group(2)

     print(matched_str)   # Output: '123-456-7890'
     print(group_1)       # Output: '123'
     print(group_2)       # Output: '456-7890'


que 6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?

ans an regular expression syntax, parentheses and intervals have special meanings, and if you want to match these characters literally, you need to escape them using a backslash \.

    To match a real parenthesis, you need to escape it with a backslash like \). Similarly, to match a period, you need to escape it with a backslash like \..

que 7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?

ans The findall() method in Python's re module returns a list of all non-overlapping matches of the regular expression in the input string.
     
  for example :-
    import re

   text = "The cat in the hat."
   pattern = r"cat"
   matches = re.findall(pattern, text)

   print(matches)


   output:-
   ['cat']

    In this case, the regular expression does not contain any capturing groups, so findall() returns a list of matching strings.

   for example:-

     import re

    text = "John Smith: 555-1234"
    pattern = r"(\w+)\s+(\w+):\s+(\d+-\d+)"
    matches = re.findall(pattern, text)

    print(matches)


   output:-
   [('John', 'Smith', '555-1234')]

que 8. In standard expressions, what does the | character mean?

ans    In regular expressions, the | character is used to indicate alternation, meaning "either/or". It allows you to match any one of a series of patterns. For example, the regular expression cat|dog matches either the string "cat" or the string "dog".


que 9  In regular expressions, what does the character stand for?


ans    regular expressions, the backslash () character is used to escape special characters or to create special character classes

que 10. .In regular expressions, what is the difference between the + and * characters?

ans The + character matches one or more occurrences of the preceding character or group.
     The * character matches zero or more occurrences of the preceding character or group.

que 11.What is the difference between {4} and {4,5} in regular expression?

ans  The {4} matches exactly three instances of the preceding group. The {4,5} matches between four and five instances.


que 12.What do means by \D, \W, and \S shorthand character classes signify in regular expressions?

Ans: The \D, \W, and \S shorthand character classes match a single character that is not a digit, word, or space character, respectively.

que 13.What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?

Ans: The \d, \w, and \s shorthand character classes match a single digit, word, or space character, respectively.

que 14. What is the difference between .* and .*?

Ans: The .* performs a greedy match, and the .*? performs a nongreedy match.

que 15.What is the syntax for matching both numbers and lowercase letters with a character class?

Ans: Either [0-9a-z] or [a-z0-9]

que 16.What is the procedure for making a normal expression in regax case insensitive?

Ans: Passing re.I or re.IGNORECASE as the second argument to re.compile() will make the matching case insensitive.

que 17.What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?

Ans: The . character normally matches any character except the newline character. If re.DOTALL is passed as the second argument to re.compile(), then the dot will also match newline characters.

que 18.If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?

Ans: 'X drummers, X pipers, five rings, X hens'

que 19 What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?

Ans: The re.VERBOSE argument allows you to add whitespace and comments to the string passed to re.compile()

que 20.How would you write a regex that match a number with comma for every three digits? It must match the given following:

                                          '42'

                                         '1,234'

                                       '6,368,745'

                                   but not the following:
 
                '12,34,567' (which has only two digits between the commas)

                                '1234' (which lacks commas)

Ans: e.compile(r'^\d{1,3}(,{3})*$') will create this regex, but other regex strings can produce a similar regular expression.

que 21.How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:

                                    'Haruto Watanabe'

                                     'Alice Watanabe'
 
                                    'RoboCop Watanabe'

                                  but not the following:

                  'haruto Watanabe' (where the first name is not capitalized)

             'Mr. Watanabe' (where the preceding word has a nonletter character)

                            'Watanabe' (which has no first name)

                  'Haruto watanabe' (where Watanabe is not capitalized)

Ans: re.compile(r'[A-Z][a-z]*\sWatanabe')

que 22.How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:

                               'Alice eats apples.'

                                 'Bob pets cats.'

                             'Carol throws baseballs.'

                              'Alice throws Apples.'

                                  'BOB EATS CATS.'

                               but not the following:

                                'RoboCop eats apples.'

                              'ALICE THROWS FOOTBALLS.'

                                  'Carol eats 7 cats.'

Ans: re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\ s(apples|cats|baseballs)\.', re.IGNORECASE)

